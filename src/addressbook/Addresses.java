// Assignment: 4
// Name: Cory Siebler
// StudentID: 1000832292
// Lecture Topic: Lecture 14 - JPA
// Description: 
package addressbook;

import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlRootElement;

/**
 * 
 * @author csiebler
 */
@Entity
@Table(name = "ADDRESSES")
@XmlRootElement
@NamedQueries({
    /*
     Named Queries autogenerated by JPA
     */
    @NamedQuery(name = "Addresses.findAll", query = "SELECT a FROM Addresses a"),
    @NamedQuery(name = "Addresses.findByAddressid", query = "SELECT a FROM Addresses a WHERE a.addressid = :addressid"),
    @NamedQuery(name = "Addresses.findByFirstname", query = "SELECT a FROM Addresses a WHERE a.firstname = :firstname"),
    /*
     The notation :lastname specifies that the parameter name is lastname
     */
    @NamedQuery(name = "Addresses.findByLastname", query = "SELECT a FROM Addresses a WHERE a.lastname = :lastname"),
    @NamedQuery(name = "Addresses.findByEmail", query = "SELECT a FROM Addresses a WHERE a.email = :email"),
    @NamedQuery(name = "Addresses.findByPhonenumber", query = "SELECT a FROM Addresses a WHERE a.phonenumber = :phonenumber")})
public class Addresses implements Serializable {

    private static final long serialVersionUID = 1L;
    
    @Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    @Basic(optional = false)
    @Column(name = "ADDRESSID")
    private Integer addressid;
    
    @Basic(optional = false)
    @Column(name = "FIRSTNAME")
    private String firstname;
    
    @Basic(optional = false)
    @Column(name = "LASTNAME")
    private String lastname;
    
    @Basic(optional = false)
    @Column(name = "EMAIL")
    private String email;
    
    @Basic(optional = false)
    @Column(name = "PHONENUMBER")
    private String phonenumber;

    /**
     * 
     */
    public Addresses() {
    }

    /**
     * 
     * @param addressid 
     */
    public Addresses(Integer addressid) {
        this.addressid = addressid;
    }

    /**
     * 
     * @param addressid
     * @param firstname
     * @param lastname
     * @param email
     * @param phonenumber 
     */
    public Addresses(Integer addressid, String firstname, String lastname, String email, String phonenumber) {
        this.addressid = addressid;
        this.firstname = firstname;
        this.lastname = lastname;
        this.email = email;
        this.phonenumber = phonenumber;
    }

    /**
     * 
     * @return 
     */
    public Integer getAddressid() {
        return addressid;
    }

    /**
     * 
     * @param addressid 
     */
    public void setAddressid(Integer addressid) {
        this.addressid = addressid;
    }

    /**
     * 
     * @return 
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * 
     * @param firstname 
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * 
     * @return 
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * 
     * @param lastname 
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * 
     * @return 
     */
    public String getEmail() {
        return email;
    }

    /**
     * 
     * @param email 
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * 
     * @return 
     */
    public String getPhonenumber() {
        return phonenumber;
    }

    /**
     * 
     * @param phonenumber 
     */
    public void setPhonenumber(String phonenumber) {
        this.phonenumber = phonenumber;
    }

    /**
     * 
     * @return 
     */
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (addressid != null ? addressid.hashCode() : 0);
        return hash;
    }

    /**
     * 
     * @param object
     * @return 
     */
    @Override
    public boolean equals(Object object) {
        // @TODO Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Addresses)) {
            return false;
        }
        
        Addresses other = (Addresses) object;
        
        return !((this.addressid == null && other.addressid != null)
                || (this.addressid != null && !this.addressid.equals(other.addressid)));
    }

    /**
     * 
     * @return 
     */
    @Override
    public String toString() {
        return "addressbook.Addresses[ addressid=" + addressid + " ]";
    }

}
